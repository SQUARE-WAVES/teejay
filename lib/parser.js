module.exports = (function () {
  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function * peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
      parser = this,

      peg$FAILED = {
        "horseflesh": "hogpizza"
      },

      peg$startRuleFunctions = {
        text: peg$parsetext
      },
      peg$startRuleFunction = peg$parsetext,

      peg$c0 = function (v) {
        return v
      },
      peg$c1 = function * (tv) {
        return yield tv;
      },
      peg$c2 = function * (t) {
        return yield t;
      },
      peg$c3 = function (t, v) {
        return {
          tag: t.tag,
          val: v
        }
      },
      peg$c4 = /^[a-z_]/,
      peg$c5 = {
        type: "class",
        value: "[a-z\\_]",
        description: "[a-z\\_]"
      },
      peg$c6 = function (chars) {
        return {
          tag: chars.join("")
        }
      },
      peg$c7 = "<",
      peg$c8 = {
        type: "literal",
        value: "<",
        description: "\"tag begin\""
      },
      peg$c9 = ">",
      peg$c10 = {
        type: "literal",
        value: ">",
        description: "\">\""
      },
      peg$c11 = "[",
      peg$c12 = {
        type: "literal",
        value: "[",
        description: "\"array start\""
      },
      peg$c13 = "{",
      peg$c14 = {
        type: "literal",
        value: "{",
        description: "\"{\""
      },
      peg$c15 = "]",
      peg$c16 = {
        type: "literal",
        value: "]",
        description: "\"]\""
      },
      peg$c17 = "}",
      peg$c18 = {
        type: "literal",
        value: "}",
        description: "\"}\""
      },
      peg$c19 = ":",
      peg$c20 = {
        type: "literal",
        value: ":",
        description: "\":\""
      },
      peg$c21 = ",",
      peg$c22 = {
        type: "literal",
        value: ",",
        description: "\",\""
      },
      peg$c23 = {
        type: "other",
        description: "whitespace"
      },
      peg$c24 = /^[ \t\n\r]/,
      peg$c25 = {
        type: "class",
        value: "[ \\t\\n\\r]",
        description: "[ \\t\\n\\r]"
      },
      peg$c26 = "false",
      peg$c27 = {
        type: "literal",
        value: "false",
        description: "\"false\""
      },
      peg$c28 = function () {
        return false;
      },
      peg$c29 = "null",
      peg$c30 = {
        type: "literal",
        value: "null",
        description: "\"null\""
      },
      peg$c31 = function () {
        return null;
      },
      peg$c32 = "true",
      peg$c33 = {
        type: "literal",
        value: "true",
        description: "\"true\""
      },
      peg$c34 = function () {
        return true;
      },
      peg$c35 = function (head, m) {
        return m;
      },
      peg$c36 = function (head, tail) {
        var result = {},
          i;

        result[head.name] = head.value;

        for (i = 0; i < tail.length; i++) {
          result[tail[i].name] = tail[i].value;
        }

        return result;
      },
      peg$c37 = function (members) {
        return members !== null ? members : {};
      },
      peg$c38 = function (name, value) {
        return {
          name: name,
          value: value
        };
      },
      peg$c39 = function (head, v) {
        return v;
      },
      peg$c40 = function (head, tail) {
        return [head].concat(tail);
      },
      peg$c41 = function (values) {
        return values !== null ? values : [];
      },
      peg$c42 = {
        type: "other",
        description: "number"
      },
      peg$c43 = function () {
        return parseFloat(text());
      },
      peg$c44 = ".",
      peg$c45 = {
        type: "literal",
        value: ".",
        description: "\".\""
      },
      peg$c46 = /^[1-9]/,
      peg$c47 = {
        type: "class",
        value: "[1-9]",
        description: "[1-9]"
      },
      peg$c48 = /^[eE]/,
      peg$c49 = {
        type: "class",
        value: "[eE]",
        description: "[eE]"
      },
      peg$c50 = "-",
      peg$c51 = {
        type: "literal",
        value: "-",
        description: "\"-\""
      },
      peg$c52 = "+",
      peg$c53 = {
        type: "literal",
        value: "+",
        description: "\"+\""
      },
      peg$c54 = "0",
      peg$c55 = {
        type: "literal",
        value: "0",
        description: "\"0\""
      },
      peg$c56 = {
        type: "other",
        description: "string"
      },
      peg$c57 = function (chars) {
        return chars.join("");
      },
      peg$c58 = "\"",
      peg$c59 = {
        type: "literal",
        value: "\"",
        description: "\"\\\"\""
      },
      peg$c60 = "\\",
      peg$c61 = {
        type: "literal",
        value: "\\",
        description: "\"\\\\\""
      },
      peg$c62 = "/",
      peg$c63 = {
        type: "literal",
        value: "/",
        description: "\"/\""
      },
      peg$c64 = "b",
      peg$c65 = {
        type: "literal",
        value: "b",
        description: "\"b\""
      },
      peg$c66 = function () {
        return "\b";
      },
      peg$c67 = "f",
      peg$c68 = {
        type: "literal",
        value: "f",
        description: "\"f\""
      },
      peg$c69 = function () {
        return "\f";
      },
      peg$c70 = "n",
      peg$c71 = {
        type: "literal",
        value: "n",
        description: "\"n\""
      },
      peg$c72 = function () {
        return "\n";
      },
      peg$c73 = "r",
      peg$c74 = {
        type: "literal",
        value: "r",
        description: "\"r\""
      },
      peg$c75 = function () {
        return "\r";
      },
      peg$c76 = "t",
      peg$c77 = {
        type: "literal",
        value: "t",
        description: "\"t\""
      },
      peg$c78 = function () {
        return "\t";
      },
      peg$c79 = "u",
      peg$c80 = {
        type: "literal",
        value: "u",
        description: "\"u\""
      },
      peg$c81 = function (digits) {
        return String.fromCharCode(parseInt(digits, 16));
      },
      peg$c82 = function (sequence) {
        return sequence;
      },
      peg$c83 = /^[^\0-\x1F"\\]/,
      peg$c84 = {
        type: "class",
        value: "[^\\0-\\x1F\\x22\\x5C]",
        description: "[^\\0-\\x1F\\x22\\x5C]"
      },
      peg$c85 = /^[0-9]/,
      peg$c86 = {
        type: "class",
        value: "[0-9]",
        description: "[0-9]"
      },
      peg$c87 = /^[0-9a-f]/i,
      peg$c88 = {
        type: "class",
        value: "[0-9a-f]i",
        description: "[0-9a-f]i"
      },

      peg$currPos = 0,
      peg$savedPos = 0,
      peg$posDetailsCache = [{
        line: 1,
        column: 1,
        seenCR: false
      }],
      peg$maxFailPos = 0,
      peg$maxFailExpected = [],
      peg$silentFails = 0,

      peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null, [{
          type: "other",
          description: description
        }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
        p, ch;

      if (details) {
        return details;
      }
      else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line: details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) {
              details.line++;
            }
            details.column = 1;
            details.seenCR = false;
          }
          else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          }
          else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line: startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line: endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) {
        return;
      }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function (a, b) {
          if (a.description < b.description) {
            return -1;
          }
          else if (a.description > b.description) {
            return 1;
          }
          else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          }
          else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) {
            return ch.charCodeAt(0).toString(16).toUpperCase();
          }

          return s
            .replace(/\\/g, '\\\\')
            .replace(/"/g, '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g, '\\t')
            .replace(/\n/g, '\\n')
            .replace(/\f/g, '\\f')
            .replace(/\r/g, '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function (ch) {
              return '\\x0' + hex(ch);
            })
            .replace(/[\x10-\x1F\x80-\xFF]/g, function (ch) {
              return '\\x' + hex(ch);
            })
            .replace(/[\u0100-\u0FFF]/g, function (ch) {
              return '\\u0' + hex(ch);
            })
            .replace(/[\u1000-\uFFFF]/g, function (ch) {
              return '\\u' + hex(ch);
            });
        }

        var expectedDescs = new Array(expected.length),
          expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1 ? expectedDescs.slice(0, -1).join(", ") + " or " + expectedDescs[expected.length - 1] : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function * peg$parsetext() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        s2 = yield * peg$parsetj_val();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s2);
            s0 = s1;
          }
          else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function * peg$parsetj_val() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = yield * peg$parsetagval();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = yield * peg$c1(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsetag();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = yield * peg$c2(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = yield * peg$parsevalue();
        }
      }

      return s0;
    }

    function * peg$parsetagval() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsetag();
      if (s1 !== peg$FAILED) {
        s2 = yield * peg$parsetj_val();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c3(s1, s2);
          s0 = s1;
        }
        else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetag() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsebegin_tag();
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c4.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        }
        else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c5);
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c4.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            }
            else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c5);
              }
            }
          }
        }
        else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend_tag();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c6(s2);
            s0 = s1;
          }
          else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebegin_tag() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 60) {
        s0 = peg$c7;
        peg$currPos++;
      }
      else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c8);
        }
      }

      return s0;
    }

    function peg$parseend_tag() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 62) {
        s0 = peg$c9;
        peg$currPos++;
      }
      else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c10);
        }
      }

      return s0;
    }

    function peg$parsebegin_array() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s2 = peg$c11;
          peg$currPos++;
        }
        else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c12);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          }
          else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebegin_object() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s2 = peg$c13;
          peg$currPos++;
        }
        else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c14);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          }
          else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseend_array() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s2 = peg$c15;
          peg$currPos++;
        }
        else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c16);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          }
          else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseend_object() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s2 = peg$c17;
          peg$currPos++;
        }
        else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c18);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          }
          else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsename_separator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c19;
          peg$currPos++;
        }
        else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c20);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          }
          else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsevalue_separator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c21;
          peg$currPos++;
        }
        else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c22);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          }
          else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsews() {
      var s0, s1;

      peg$silentFails++;
      s0 = [];
      if (peg$c24.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      }
      else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c25);
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c24.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        }
        else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c25);
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c23);
        }
      }

      return s0;
    }

    function * peg$parsevalue() {
      var s0;

      s0 = peg$parsestring();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenumber();
        if (s0 === peg$FAILED) {
          s0 = peg$parsefalse();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetrue();
            if (s0 === peg$FAILED) {
              s0 = peg$parsenull();
              if (s0 === peg$FAILED) {
                s0 = yield * peg$parsearray();
                if (s0 === peg$FAILED) {
                  s0 = yield * peg$parseobject();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsefalse() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c26) {
        s1 = peg$c26;
        peg$currPos += 5;
      }
      else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c27);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c28();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenull() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c29) {
        s1 = peg$c29;
        peg$currPos += 4;
      }
      else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c30);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c31();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetrue() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c32) {
        s1 = peg$c32;
        peg$currPos += 4;
      }
      else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c33);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c34();
      }
      s0 = s1;

      return s0;
    }

    function * peg$parseobject() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsebegin_object();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = yield * peg$parsemember();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = yield * peg$parsemember();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c35(s3, s7);
              s5 = s6;
            }
            else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parsevalue_separator();
            if (s6 !== peg$FAILED) {
              s7 = yield * peg$parsemember();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c35(s3, s7);
                s5 = s6;
              }
              else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c36(s3, s4);
            s2 = s3;
          }
          else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
        else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend_object();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c37(s2);
            s0 = s1;
          }
          else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function * peg$parsemember() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsestring();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsename_separator();
        if (s2 !== peg$FAILED) {
          s3 = yield * peg$parsetj_val();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c38(s1, s3);
            s0 = s1;
          }
          else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function * peg$parsearray() {

      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsebegin_array();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = yield * peg$parsetj_val();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = yield * peg$parsetj_val();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c39(s3, s7);
              s5 = s6;
            }
            else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parsevalue_separator();
            if (s6 !== peg$FAILED) {
              s7 = yield * peg$parsetj_val();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c39(s3, s7);
                s5 = s6;
              }
              else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c40(s3, s4);
            s2 = s3;
          }
          else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
        else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        } if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend_array();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c41(s2);
            s0 = s1;
          }
          else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseminus();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseint();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefrac();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseexp();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c43();
              s0 = s1;
            }
            else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
          else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c42);
        }
      }

      return s0;
    }

    function peg$parsedecimal_point() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 46) {
        s0 = peg$c44;
        peg$currPos++;
      }
      else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c45);
        }
      }

      return s0;
    }

    function peg$parsedigit1_9() {
      var s0;

      if (peg$c46.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      }
      else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c47);
        }
      }

      return s0;
    }

    function peg$parsee() {
      var s0;

      if (peg$c48.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      }
      else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c49);
        }
      }

      return s0;
    }

    function peg$parseexp() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsee();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseminus();
        if (s2 === peg$FAILED) {
          s2 = peg$parseplus();
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseDIGIT();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseDIGIT();
            }
          }
          else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          }
          else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefrac() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsedecimal_point();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseDIGIT();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseDIGIT();
          }
        }
        else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        }
        else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseint() {
      var s0, s1, s2, s3;

      s0 = peg$parsezero();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsedigit1_9();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseDIGIT();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseDIGIT();
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          }
          else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseminus() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c50;
        peg$currPos++;
      }
      else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c51);
        }
      }

      return s0;
    }

    function peg$parseplus() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c52;
        peg$currPos++;
      }
      else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c53);
        }
      }

      return s0;
    }

    function peg$parsezero() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 48) {
        s0 = peg$c54;
        peg$currPos++;
      }
      else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c55);
        }
      }

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsequotation_mark();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsechar();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsechar();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequotation_mark();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c57(s2);
            s0 = s1;
          }
          else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c56);
        }
      }

      return s0;
    }

    function peg$parsechar() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$parseunescaped();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseescape();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s2 = peg$c58;
            peg$currPos++;
          }
          else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c59);
            }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 92) {
              s2 = peg$c60;
              peg$currPos++;
            }
            else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c61);
              }
            }
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s2 = peg$c62;
                peg$currPos++;
              }
              else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c63);
                }
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 98) {
                  s3 = peg$c64;
                  peg$currPos++;
                }
                else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c65);
                  }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c66();
                }
                s2 = s3;
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 102) {
                    s3 = peg$c67;
                    peg$currPos++;
                  }
                  else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c68);
                    }
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s2;
                    s3 = peg$c69();
                  }
                  s2 = s3;
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 110) {
                      s3 = peg$c70;
                      peg$currPos++;
                    }
                    else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c71);
                      }
                    }
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s2;
                      s3 = peg$c72();
                    }
                    s2 = s3;
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 114) {
                        s3 = peg$c73;
                        peg$currPos++;
                      }
                      else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c74);
                        }
                      }
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s2;
                        s3 = peg$c75();
                      }
                      s2 = s3;
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 116) {
                          s3 = peg$c76;
                          peg$currPos++;
                        }
                        else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c77);
                          }
                        }
                        if (s3 !== peg$FAILED) {
                          peg$savedPos = s2;
                          s3 = peg$c78();
                        }
                        s2 = s3;
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 117) {
                            s3 = peg$c79;
                            peg$currPos++;
                          }
                          else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c80);
                            }
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$currPos;
                            s5 = peg$currPos;
                            s6 = peg$parseHEXDIG();
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parseHEXDIG();
                              if (s7 !== peg$FAILED) {
                                s8 = peg$parseHEXDIG();
                                if (s8 !== peg$FAILED) {
                                  s9 = peg$parseHEXDIG();
                                  if (s9 !== peg$FAILED) {
                                    s6 = [s6, s7, s8, s9];
                                    s5 = s6;
                                  }
                                  else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                  }
                                }
                                else {
                                  peg$currPos = s5;
                                  s5 = peg$FAILED;
                                }
                              }
                              else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                              }
                            }
                            else {
                              peg$currPos = s5;
                              s5 = peg$FAILED;
                            }
                            if (s5 !== peg$FAILED) {
                              s4 = input.substring(s4, peg$currPos);
                            }
                            else {
                              s4 = s5;
                            }
                            if (s4 !== peg$FAILED) {
                              peg$savedPos = s2;
                              s3 = peg$c81(s4);
                              s2 = s3;
                            }
                            else {
                              peg$currPos = s2;
                              s2 = peg$FAILED;
                            }
                          }
                          else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c82(s2);
            s0 = s1;
          }
          else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseescape() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 92) {
        s0 = peg$c60;
        peg$currPos++;
      }
      else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c61);
        }
      }

      return s0;
    }

    function peg$parsequotation_mark() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 34) {
        s0 = peg$c58;
        peg$currPos++;
      }
      else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c59);
        }
      }

      return s0;
    }

    function peg$parseunescaped() {
      var s0;

      if (peg$c83.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      }
      else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c84);
        }
      }

      return s0;
    }

    function peg$parseDIGIT() {
      var s0;

      if (peg$c85.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      }
      else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c86);
        }
      }

      return s0;
    }

    function peg$parseHEXDIG() {
      var s0;

      if (peg$c87.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      }
      else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c88);
        }
      }

      return s0;
    }


    peg$result = yield * peg$startRuleFunction();


    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    }
    else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({
          type: "end",
          description: "end of input"
        });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
})();